
Pylon MFD options

Option: SHOWCOMMANDS show
Description: Show all Pylon parameters, or allow displaying only sequences in the mfd.
Value: 0 = Show only user sequences (blue); 1 = Show all parameters (green) and user sequences (blue).


Pylon Commands description

Command description format in this doc:

Command: <COMMAND_KEYWORD> <parameter1type> <parameter2type> <parameter3type> ...
Description: A description.
Duration: A command can be instantly executed or can involve an amount to time to complete.
Parameters: Description of the parameter values needed by the command. If a command is passed less paramters than it expects, it qill do nothing and the sequence will be invalidated (will not show in the MFD)
Example: An example of use.

Abbreviations for parameter values in this doc:
    vessel: A vessel name. Example: "STS-9"
    pylon: A Pylon vessel name. Example: "APylon"
    param: A Pylon vessel parameter name. Example: "APylon:RotAngle"
    seq: A Pylon vessel sequence name. Example: "APylon:ASequence"
    value: A value of any type (numerical or string) Example: 34.0
    <somename>(<someType>): a value of SomeType, with a name that explains the paarmeter purpose.

All string types must be enclosed by "" and that the parameter names and sequence names use the syntax "pylonvesselname:param_name" or "pylonvesselname:sequence_name", and that the 'pylonvesselname' part is optional if the parameter or sequence belongs to the pylon executing the sequence command.

List of command names and parameters:

SET_PARAM param value
CALL_SEQ seq value
CANCEL_SEQ seq value
SET_CANCEL_SEQUENCE seq
SET_SEQUENCE_KEY sequence key
DELAY seconds(Scalar)
DELAY_UNTIL_MJD MJDdate(Scalar)
DELAY_UNTIL_SIMT simtime(Scalar)
WAIT_SEQUENCE seq
WAIT_FUEL_LEVEL vessel propellant_resource(Integer) fuel_level(Scalar)
WAIT_THRUSTER_LEVEL vessel thruster(Integer) thrust_level(Scalar)
ATTACH parent(vessel) att_parent(Integer) att_child(Integer) child(vessel)
ATTACH_DISTANCE 
ATTACH_ALIGNED
RELEASE velocity
RELEASE_ATT velocity
CREATE_ATTACHED
DESTROY
SET_FUEL_LEVEL vessel propellant_resource(Integer) fuel_level(Scalar)
TRANSFER_FUEL
SET_MAIN_THRUST vessel level rate
SET_RETRO_THRUST vessel level rate
SET_HOVER_THRUST vessel level rate
SET_THRUSTER_LEVEL vessel thruster(Integer) thrust_level(Scalar)
CHANGE_THRUST_DIRECTION
SET_CAMERA_OFFSET offx(Scalar) offy(Scalar) offz(Scalar)
SET_CAMERA_DIRECTION dirx(Scalar) diry(Scalar) dirz(Scalar) tilt(Angle)
SET_CAMERA_FOV angle(deg) velocity(deg/s)
SET_FOCUS vessel
SET_ENABLE_FOCUS vessel enabled(Boolean)
USER_SEQ_ENABLED seq enabled(Boolean)
USER_RELEASE_ENABLED vessel enabled(Boolean)
USER_CREATE_ENABLED vessel enabled(Boolean)
USER_DESTROY_ENABLED vessel enabled(Boolean)
ADD_MESH filename(str) meshname(str) visibility x y z
SET_MESH_VISIBILITY meshname visibility
CLEAR_MESHES
SEND_KEY
REDIRECT_KEYS
RESET

Sound commands (Requires installation of OrbiterSound 4.0):

SOUND_REPLACE_STOCK soundfile(str) WhichSoundToReplace(int)
SOUND_LOAD soundfile(str) soundname(str) soundslot(1..60) mode(0..8)
SOUND_PLAY soundname(str) loop(0..1) volume(0..255)
SOUND_STOP soundname(str)





Commands description


----------------------------
Command: SET_PARAM param value
Description: Sets a Pylon parameter, ie Ang_Rot, Lin_Vel_Max, etc.
Duration: Until the pylon has set the parameter (can be instantaneous or not)
Parameters:
    1: The parameter name
    2: the value to set it to.
Example:
    SET_PARAM "aPylon:Rot_Angle" 30.0


----------------------------
Command: CALL_SEQ seq value
Description: Calls a sequence.
Duration: Until the sequence finishes its execution or is cancelled elsewhere. If it was not 	active, the command CALL_SEQ terminates instantly.
Parameters:
    1: The sequence to call.
    2: The value to pass as parameter. Currently this is mandatory even if the sequence doesn't have a parameter type. Simply put a 0 for the moment.
Example:
    CALL_SEQ ":DO_SOMETHING" "A string value"


----------------------------
Command: CANCEL_SEQ seq value
Description: Cancels an active sequence, and calls the cancel sequence if one was defined.
Duration: Until the cancel sequence finishes if it was defined, or instantly if it wasn't.
Parameters:
	1: The sequence to cancel.
	2: The value to pass to the cancel sequence if it is defined and has parameter type. This is mandatory as in CALL_SEQ, even if there's no cancel sequence or it hasn't parameter.
Example: CANCEL_SEQ ":DO_SOMETHING" 30.0


----------------------------
Command: SET_CANCEL_SEQUENCE "seq"
Description: Defines the sequence "seq" as the cancel sequence of the one that executes this command. Though this is a command, it is executed on sequence creation, and so the cancel sequence must exist before this one, so this means that a cancel sequence must be defined above the sequence it will belong to, in the file.
The cancel sequence could belong to another pylon, but it is not recommended (in the case a vessel could be deleted)
Duration: None (executes at creation of the sequence)
Parameters:
    1: The cancel sequence
Example:
    Lets define a sequence and its cancel sequence (remember, in reverse order) Note that the cancel sequence is not callable by the user.

    BEGINSEQ "TheCancelSequence" PARALLEL
        SET_PARAM "aPylon:Rot_Angle" 0
        SET_PARAM "anotherPylon:Rot_Angle" 0
    1ENDSEQ
    BEGINSEQ "TheSequence" (Scalar) USER
        SET_CANCEL_SEQUENCE ":TheCancelSequence"  ;Note the : here. This always must be.
        SET_PARAM "aPylon:Rot_Angle" #
        SET_PARAM "anotherPylon:Rot_Angle" 45
    ENDSEQ

----------------------------
Command: SET_SEQUENCE_KEY sequence key(Integer)
Description: This command sets the key wich activates a sequence in this Pylon (when it is in focus). Set the key to 0 to disable the key. This command is persisted in the STATE sequence of the Pylon.
Duration: Instant
Parameters:
    1: Name of pylon sequence.
    2: key code. See orbiterAPI.h for keyboard key codes. 0 to disable key.
Example: DELAY 1.5

----------------------------
Command: DELAY seconds(Scalar)
Description: Waits for the specified amount of seconds
Duration: Try to guess..
Parameters: The amount of seconds to wait
Example: DELAY 1.5


----------------------------
Command: DELAY_UNTIL_MJD MJDdate(Scalar)
Description: Waits until the specified MJD date is reached
Duration: Try to guess..
Parameters: The MJD date to wait for (units are days)
Example: DELAY_UNTIL_MJD 51982.5568


----------------------------
Command: DELAY_UNTIL_SIMT simtime(Scalar)
Description: Waits until the simulation time has been reached. Note that if the Orbiter session is quitted and restarted while this command is running, the termination of the command will be determined by the sim time it was when the command was executed, and will not be affected by the sim time being reset. In other words, the three delay commands convert the time to awake to an absolute time reference, and then waits to that time.
Duration: Try to guess..
Parameters: The sim time to wait for (units are seconds)
Example: DELAY_UNTIL_SIMT 600


----------------------------
Command: WAIT_SEQUENCE seq
Description: Waits until the sequence terminates execution (not cancelling, only execution)
Duration: Well, already said.
Parameters: The sequence to wait for.
Example: WAIT_SEQUENCE "aPylon:aSequence"


----------------------------
Command: WAIT_FUEL_LEVEL vessel propellant_resource(Integer) fuel_level(Scalar)
Description: Waits until the fuel level of the propellant resource (tank) identified by its index  goes below the specified level.
Duration: 0 to infinite.
Parameters:
    1: The vessel.
    2: The index of the propellant resource of the vessel. Must be >= 0 and < the number of tanks in the vessel, or the command will just finish.
    3: The fuel level to wait for (between 0 and 1)
Example: WAIT_FUEL_LEVEL "Discovery" 0 0.1


----------------------------
Command: WAIT_THRUSTER_LEVEL vessel thruster(Integer) thrust_level(Scalar)
Description: Waits until the specified thruster level gets above the specified level.
Duration: 0 to infinite.
Parameters:
    1: The vessel.
    2: The index of the vessel thruster. Must be >= 0 and < the number of thrusters in the vessel, or the command will just finish.
    3: The thruster level to wait for (between 0 and 1)
Example: WAIT_THRUSTER_LEVEL "Discovery" 0 0.95


----------------------------
Command: ATTACH parent(vessel) att_parent(Integer) att_child(Integer) child(vessel)
Description: Attach the child vessel to the parent vessel. Notes: This command attaches the child to the parent wherever they are, so its not very realistic.
Duration: Instant.
Parameters:
    1: The parent vessel
    2: The attachment of the parent to attach the child (type tochild, C)
    3: The attachment of the child to use (type toparent, P)
    4: The child vessel
Example: ATTACH "Discovery" 0 0 "Carina"

----------------------------
Command: ATTACH_DISTANCE parentvessel tochild toparent childvessel distance
Description: Waits for the distance between the P attachment of parentvessel and the C attachment of childvessel to be less than the parameter "distance", and the proceeds to attach the two vessels with those attachment points.
Duration: Until the two attachment points are closer than "distance" meters.
Parameters:
    1: Parent vessel name
    2: "C" Type attachment index in the parent vessel.
    3: "P" Type attachment index in the child vessel.
    4: Child vessel name.
    5: Threshold distance in meters.
Example:
    ATTACH_DISTANCE "SH-01" 0 1 "someVessel" 1.5

----------------------------
Command: ATTACH_ALIGNED parentvessel tochild toparent childvessel distance angle
Description: This commands does the same as ATTACH_DISTANCE, adding a restriction of angle. If the distance restriction is satisfied and the attachments vectors are aligned (the angle between homonym vectors is less than the "angle" parameter), the attaching is performed.
Duration: Until the two attachment points are closer than "distance" meters and aligned enough.
Parameters:
    1: Parent vessel name
    2: "C" Type attachment index in the parent vessel.
    3: "P" Type attachment index in the child vessel.
    4: Child vessel name.
    5: Threshold distance in meters.
    6: Threshold angle in degrees.
Example:
    ATTACH_DISTANCE "SH-01" 0 1 "someVessel" 1.5

----------------------------
Command: RELEASE vessel velocity   *** This command doesn't work at the moment. Please use RELEASE_ATT instead
Description: Release an attached vessel with a initial speed. If it is a pylon and was rotating, the angular velocity is maintained. No angular momentum calcs are performed, but linear momentum is conserved.
Duration: Instant
Parameters:
    1: Name of the vessel to be detached.
    2: Velocity of initial impulse in m/s
Example:
    RELEASE "Carina" 0.3

----------------------------
Command: RELEASE_ATT parent(vessel) att_parent(Integer) velocity
Description: Release an attached vessel with a initial speed and angular velocity, like the RELEASE command, but this one specifies the name and C attachment index of the parent vessel.
Duration: Instant
Parameters:
    1: The parent vessel name
    2: The attachment index of the parent to attach the child to (type tochild, C)
    3: Velocity of initial impulse in m/s
Example:
    RELEASE_ATT "ST-01" 0 0.3

----------------------------
Command: SET_FUEL_LEVEL vessel propellant_resource(Integer) fuel_level(Scalar)
Description: Sets the fuel level of the propellant resource (tank) identified by its index  to the specified level.
Duration: Instant.
Parameters:
    1: Name of the vessel
    2: The index of the propellant resource of the vessel. Must be >= 0 and < the number of tanks in the vessel.
    3: The desired fuel level (between 0 and 1)
Example: SET_FUEL_LEVEL "Discovery" 0 1.0

----------------------------
Command: TRANSFER_FUEL srcvessel sourcetank destvessel desttank fuelmass
Description: Makes a instant transfer of fuel from a vessel to another vessel.
Duration: Instant.
Parameters:
    1: Name of the source vessel
    2: Index of the source vessel fuel tank
    3: Name of the destination vessel
    4: Index of the destination vessel fuel tank
    5: Fuel mass to transfer, in Kg. If it is greater than the source tank current fuel mass, the remaining fuel will be transfered.

----------------------------
Command: SET_MAIN_THRUST vessel level rate
Description: Sets the levels of all the thrusters in the group MAIN to the specified level. It does linearly at a constant rate.
Duration: Indetemined (thruster level could be set externally, for example from user input).
Parameters:
    1: Name of the vessel.
    2: The thrust level.
    3: rate of change
Example: SET_MAIN_THRUST "STS-9" 1.0 0.16667


----------------------------
Command: SET_RETRO_THRUST vessel level rate
Description: Sets the levels of all the thrusters in the group RETRO to the specified level. It does linearly at a constant rate.
Duration: Indetemined (thruster level could be set externally, for example from user input).
Parameters:
    1: The vessel to set the thrust level.
    2: The thrust level.
    3: rate of change
Example: SET_RETRO_THRUST "SH-1" 1.0 0.1


----------------------------
Command: SET_HOVER_THRUST vessel level rate
Description: Sets the levels of all the thrusters in the group HOVER to the specified level. It does linearly at a constant rate.
Duration: Indetemined (thruster level could be set externally, for example from user input).
Parameters:
    1: The vessel to set the thrust level.
    2: The thrust level.
    3: rate of change
Example: SET_HOVER_THRUST "SH-1" 1.0 0.1


----------------------------
Command: SET_THRUSTER_LEVEL vessel thruster(Integer) thrust_level(Scalar)
Description: Sets a single thruster level.
Duration: Instant.
Parameters:
    1: The vessel.
    2: The index of the vessel thruster. Must be >= 0 and < the number of thrusters in the vessel, or the command will just finish.
    3: The desired thruster level (between 0 and 1)
Example: SET_THRUSTER_LEVEL "Discovery" 0 0.0

----------------------------
Command: CHANGE_THRUST_DIRECTION vessel1 thruster vessel2
Description: Sets continuously a thruster of vessel1 to be in the position of vessel2 and to point in the direction of the vessel2 local Z axis.
Duration: Instant.
Parameters:
    1: Name of the vessel vessel1
    2: Index of the thruster to be modified in vessel1
    3: Name of the vessel vessel2
    
----------------------------
Command: SET_CAMERA_OFFSET offx(Scalar) offy(Scalar) offz(Scalar)
Description: Changes the cockpit camera position.
Duration: Instant.
Parameters:
    1: The vessel to change camera offset.
    2,3,4: The coordinates of the new camera offset(local vessel coordinates)
Example: SET_CAMERA_OFFSET "aVessel" 3 -2 10

----------------------------
Command: SET_CAMERA_DIRECTION dirx(Scalar) diry(Scalar) dirz(Scalar) tilt(Angle)
Description: Changes the cockpit camera direction.
Duration: Instant.
Parameters:
    1: The vessel to change camera offset.
    2,3,4: The coordinates of the new camera direction (local vessel coordinates). Must not be (0, 0, 0 )
    5: Tilt angle (0 for horizontal)
Example: SET_CAMERA_DIRECTION "aVessel" 3 -2 10 45

----------------------------
Command: SET_CAMERA_FOV angle(deg) velocity(deg/s)
Description: Changes the current camera FOV (Field Of View) in degrees. It is the vertical aperture of the virtual camera. The change is transitioned at a rate of 'velocity' parameter in degrees per second.
Duration: Instant.
Parameters:
    1: Target FOV angle
    2: Transition velocity in degrees/s

----------------------------
Command: SET_ENABLE_FOCUS vessel enabled(Boolean)
Description: Enables or disables the ability of the vessel to receive user focus.
Duration: Instant.
Parameters:
    1: The vessel.
    2: The value indicating enabling/disabling of the option
Example: SET_ENABLE_FOCUS "aVessel" 0

----------------------------
Command: SET_FOCUS vessel
Description: Change the current user input focus to the specified vessel.
Duration: Instant.
Parameters:
    1: Name of the vessel that is about to receive input focus

----------------------------
Command: USER_SEQ_ENABLED seq enabled(Boolean)
Description: Sets a sequence to be user or not. User sequences are the ones that the user can access through the MFD.
Duration: Instant.
Parameters:
    1: The sequence.
    2: The value indicating enabling/disabling of the option
Example: USER_SEQ_ENABLED "aPylon:aSequence" 1

----------------------------
Command: USER_RELEASE_ENABLED vessel enabled(Boolean)
Description: This option makes it possible to forbid the user to release a Pylon through the MFD. By default the option is True (the user can release it) Not-pylon vessels always can be released through the MFD.
Duration: Instant.
Parameters:
    1: The Pylon.
    2: The value indicating enabling/disabling of the option
Example: USER_RELEASE_ENABLED "aPylon" 0


----------------------------
Command: USER_CREATE_ENABLED vessel enabled(Boolean)
Description: This option makes it possible to forbid the user to create objects in the attachments of a Pylon through the MFD. By default the option is True (the user can create objects) The MFD always allows creating objects in the attachments of not-Pylon vessels.
Duration: Instant.
Parameters:
    1: The Pylon.
    2: The value indicating enabling/disabling of the option
Example: USER_CREATE_ENABLED "aPylon" 0


----------------------------
Command: USER_DESTROY_ENABLED vessel enabled(Boolean)
Description: This option makes it possible to forbid the user to destroy a Pylon through the MFD. By default the option is True (the user can destroy it) The MFD always allows destroying not-Pylon vessels.
Duration: Instant.
Parameters:
    1: The Pylon.
    2: The value indicating enabling/disabling of the option
Example: USER_DESTROY_ENABLED "aPylon" 0


----------------------------
Command: SEND_KEY vessel key(Integer) pressed(Boolean) leftShift(Boolean) rightShift(Boolean) leftControl(Boolean) rightControl(Boolean) leftAlt(Boolean) rightAlt(Boolean)
Description: Send a buffered key to the vessel (pressed or released event)
Duration: Instant.
Parameters:
    1: The vessel
    2: Key code (decimal integer)
    3: 1 for key pressed, 0 for key released.
    4: modifier active (0 or 1) leftShift
    5: modifier active (0 or 1) rightShift
    6: modifier active (0 or 1) leftControl
    7: modifier active (0 or 1) rightControl
    8: modifier active (0 or 1) leftAlt
    9: modifier active (0 or 1) rightAlt


----------------------------
Command: REDIRECT_KEYS vessel 
Description: Redirect keys pressed by the user while this Pylon is in focus, to the target vessel.
Duration: Instant.
Parameters:
    1: The target vessel. If it is the same as this Pylon, the keys redirection is disabled.


----------------------------
Command: RESET
Description: Resets the sequence so it starts execution from the beginning.
Duration: Instant.
Parameters: none.


----------------------------
Command: CREATE_ATTACHED parentvessel tochild toparent childname childclass
Description: Creates a vessel of class "childclass" and named "childname", and attaches it to the C type attachment with index "tochild" using the P attachment with index "toparent" of the child.
Duration: Instant.
Parameters:
    1: The name of the parent vessel where the new object is to be attached.
    2: the C type attachment index in the parent.
    3: The P type attachment index in the newly created child.
    4: The name of the new child object.
    5: The class of the new child object.
Example:
    CREATE_ATTACHED "ST-01" 0 1 "newVesselName" "vesselClass"


----------------------------
Command: DESTROY "vesselname"
Description: Destroys the vessel.
Duration: Instant.
Parameters:
    1: The name of the vessel to be destroyed.

----------------------------
Command: ADD_MESH filename(str) meshname(str) visibility x y z
Description: Adds a mesh to this Pylon
Duration: Instant
Parameters:
    1: filename: mesh file path without extension
    2: meshname: unique name given to this mesh
    3: visibility: Visibility mode as in the following list:
        MESHVIS_NEVER          0
        MESHVIS_EXTERNAL       1
        MESHVIS_COCKPIT        2
        MESHVIS_ALWAYS         3
        MESHVIS_VC             4
        MESHVIS_EXTPASS        Add 16 to any of the previous values
    4, 5, 6: x,y,z: coordinates of mesh relative to vessel.

----------------------------
Command: SET_MESH_VISIBILITY meshname visibility
Description: Changes visibility mode for a mesh
Duration: Instant.
Parameters:
    1: meshname: Unique name given to this mesh
    2: Visibility mode, see ADD_MESH command description.


----------------------------
Command: CLEAR_MESHES
Description: Clears all meshes in vessel
Duration: Instant.
Parameters: None.

----------------------------
Command: SOUND_REPLACE_STOCK soundfile(str) WhichSoundToReplace(int)
Description: Replaces standard sound.
Duration: Instant.
Parameters:
    1: Path of sound file ex: "sound\vessel\aircond.wav"
    2: Index of sound to replace, as in the following list:

WhichSoundToReplace:
REPLACE_MAIN_THRUST			 10		
REPLACE_HOVER_THRUST		 11		
REPLACE_RCS_THRUST_ATTACK	 12	
REPLACE_RCS_THRUST_SUSTAIN	 13	
REPLACE_AIR_CONDITIONNING	 14		
REPLACE_COCKPIT_AMBIENCE_1	 15	
REPLACE_COCKPIT_AMBIENCE_2	 16		
REPLACE_COCKPIT_AMBIENCE_3	 17	
REPLACE_COCKPIT_AMBIENCE_4	 18	
REPLACE_COCKPIT_AMBIENCE_5	 19		
REPLACE_COCKPIT_AMBIENCE_6	 20	
REPLACE_COCKPIT_AMBIENCE_7	 21	
REPLACE_COCKPIT_AMBIENCE_8	 22	
REPLACE_COCKPIT_AMBIENCE_9	 23	


----------------------------
Command: SOUND_LOAD soundfile(str) soundname(str) soundslot(1..60) mode(0..8)
Description: Loads a custom sound file in a sound slot. This command should be used only in the STATE sequence, and it is persisted automatically there. Don't use the same name two times.
Duration: Instant
Parameters:
    1: Path of sound file ex: "sound\vessel\aircond.wav"
    2: Sound name to identify later the sound
    3: Index of sound, 1 to 60
    3: Mode numberas in the following list:

Mode:
DEFAULT, 0
INTERNAL_ONLY, 1
BOTHVIEW_FADED_CLOSE, 2
BOTHVIEW_FADED_MEDIUM, 3
BOTHVIEW_FADED_FAR, 4
EXTERNAL_ONLY_FADED_CLOSE, 5
EXTERNAL_ONLY_FADED_MEDIUM, 6
EXTERNAL_ONLY_FADED_FAR, 7
RADIO_SOUND, 8

Read OrbiterSoundSDK3.h for explanation on the play modes.


----------------------------
Command: SOUND_PLAY soundname(str) loop(0..1) volume(0..255)
Description: Plays a sound if vessel is in focus. Note: Loop is necessary to hear distance attenuation.
Duration: Command ends when sound is finished only if playing without loop. With loop on, the command never ends.
Parameters:
    1: Name previously defined when loading the sound.
    2: 0 = Don't loop the sound, 1 = Do loop the sound.
    3: Volume from 0 (silent) to 255 (max. volume)

----------------------------
Command: SOUND_STOP soundname(str)
Description: Stops a sound if it is playing.
Duration: Instant.
Parameters:
    1: Name of the sound, previously defined when loading the sound.

